// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  name        String
  password    String
  role        UserRole @default(TEAM)
  avatar      String?
  accessToken String?  @unique // Token para acesso ao portal do colaborador
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relacionamentos
  assignedTasks Task[]
  comments      Comment[]
  notifications Notification[]
  teamProjects  ProjectTeam[]
  timeEntries   TimeEntry[]
  timerEvents   TimerEvent[]

  @@map("users")
}

model Client {
  id          String   @id @default(cuid())
  name        String
  email       String   @unique
  phone       String?
  company     String?
  accessToken String   @unique // Token para acesso ao portal
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relacionamentos
  projects Project[]
  comments Comment[]
  payments Payment[]

  @@map("clients")
}

model Project {
  id          String        @id @default(cuid())
  name        String
  description String?
  status      ProjectStatus @default(PLANNING)
  startDate   DateTime
  endDate     DateTime?
  budget      Float?
  isPaused    Boolean       @default(false)
  pausedAt    DateTime?
  pauseReason String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relacionamentos
  clientId   String
  client     Client         @relation(fields: [clientId], references: [id], onDelete: Cascade)
  milestones Milestone[]
  tasks      Task[]
  sprints    Sprint[]
  comments   Comment[]
  files      ProjectFile[]
  team       ProjectTeam[]
  financials FinancialEntry[]
  paymentProjects PaymentProject[]

  @@map("projects")
}

model Milestone {
  id          String          @id @default(cuid())
  name        String
  description String?
  status      MilestoneStatus @default(PENDING)
  dueDate     DateTime?
  completedAt DateTime?
  order       Int
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  // Relacionamentos
  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  tasks     Task[]

  @@map("milestones")
}

model Task {
  id          String     @id @default(cuid())
  title       String
  description String?
  status      TaskStatus @default(TODO)
  priority    Priority   @default(MEDIUM)
  dueDate     DateTime?
  startDate   DateTime?
  startTime   String?
  endTime     DateTime?
  completedAt DateTime?
  estimatedMinutes Int?
  actualMinutes    Int?
  storyPoints Int?       // Story Points para estimativa Scrum
  order       Int        @default(0) // Ordem para drag & drop
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relacionamentos
  projectId   String
  project     Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  milestoneId String?
  milestone   Milestone? @relation(fields: [milestoneId], references: [id])
  assigneeId  String?
  assignee    User?     @relation(fields: [assigneeId], references: [id])
  sprintId    String?
  sprint      Sprint?   @relation(fields: [sprintId], references: [id])
  comments    Comment[]
  timeEntries TimeEntry[]
  timerEvents TimerEvent[]

  @@map("tasks")
}

model Sprint {
  id          String      @id @default(cuid())
  name        String
  description String?
  status      SprintStatus @default(PLANNING)
  startDate   DateTime
  endDate     DateTime
  goal        String?     // Objetivo da sprint
  capacity    Int?        // Capacidade total em story points
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relacionamentos
  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  tasks     Task[]

  @@map("sprints")
}

model Comment {
  id        String      @id @default(cuid())
  content   String
  type      CommentType @default(INTERNAL)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  // Relacionamentos
  authorId  String?
  author    User?    @relation(fields: [authorId], references: [id])
  clientId  String?
  client    Client?  @relation(fields: [clientId], references: [id])
  projectId String
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  taskId    String?
  task      Task?    @relation(fields: [taskId], references: [id])

  @@map("comments")
}

model ProjectFile {
  id        String   @id @default(cuid())
  filename  String
  originalName String
  mimeType  String
  size      Int
  url       String
  createdAt DateTime @default(now())

  // Relacionamentos
  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("project_files")
}

model ProjectTeam {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  role      String? // Papel específico no projeto
  joinedAt  DateTime @default(now())

  @@unique([userId, projectId])
  @@map("project_team")
}

model FinancialEntry {
  id          String            @id @default(cuid())
  type        FinancialType
  category    String
  description String
  amount      Float
  date        DateTime
  isRecurring Boolean           @default(false)
  recurringType RecurringType?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  // Relacionamentos
  projectId String?
  project   Project? @relation(fields: [projectId], references: [id])
  
  // Vinculação com pagamento (para entradas geradas a partir de pagamentos distribuídos)
  paymentId String?
  payment   Payment? @relation(fields: [paymentId], references: [id])

  @@map("financial_entries")
}

model Payment {
  id          String   @id @default(cuid())
  amount      Float    // Valor total do pagamento
  description String?
  paymentDate DateTime
  method      PaymentMethod @default(BANK_TRANSFER)
  status      PaymentStatus @default(PENDING)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relacionamentos
  clientId String
  client   Client @relation(fields: [clientId], references: [id], onDelete: Cascade)
  
  // Vinculação com projetos
  paymentProjects PaymentProject[]
  
  // Entradas financeiras geradas a partir deste pagamento
  financialEntries FinancialEntry[]

  @@map("payments")
}

model PaymentProject {
  id        String   @id @default(cuid())
  amount    Float    // Valor aplicado neste projeto específico
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relacionamentos
  paymentId String
  payment   Payment @relation(fields: [paymentId], references: [id], onDelete: Cascade)
  
  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([paymentId, projectId])
  @@map("payment_projects")
}

model Notification {
  id        String           @id @default(cuid())
  title     String
  message   String
  type      NotificationType
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())

  // Relacionamentos
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model TimeEntry {
  id          String   @id @default(cuid())
  startTime   DateTime
  endTime     DateTime?
  duration    Int?     // Duração em segundos
  description String?
  isActive    Boolean  @default(false) // Se o cronômetro está rodando
  isPaused    Boolean  @default(false) // Se o cronômetro está pausado
  pausedAt    DateTime? // Quando foi pausado
  pausedTime  Int      @default(0) // Tempo total pausado em segundos
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relacionamentos
  taskId String
  task   Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("time_entries")
}

model TimerEvent {
  id          String         @id @default(cuid())
  type        TimerEventType
  userId      String
  userName    String
  taskId      String
  taskTitle   String
  projectName String
  sprintName  String?
  duration    Int?           // Duração em segundos no momento do evento
  totalTime   Int?           // Tempo total acumulado em segundos
  isPaused    Boolean        @default(false)
  pausedTime  Int?           // Tempo pausado em segundos
  sessionId   String?        // ID da sessão de trabalho
  metadata    Json?          // Dados adicionais em JSON
  timestamp   DateTime       @default(now())
  createdAt   DateTime       @default(now())

  // Relacionamentos
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)

  // Índices para consultas rápidas
  @@index([userId, timestamp])
  @@index([taskId, timestamp])
  @@index([type, timestamp])
  @@map("timer_events")
}

// Enums
enum UserRole {
  ADMIN
  TEAM
  CLIENT
}

enum ProjectStatus {
  PLANNING
  IN_PROGRESS
  ON_HOLD
  COMPLETED
  CANCELLED
}

enum MilestoneStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  IN_REVIEW
  COMPLETED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum CommentType {
  INTERNAL
  CLIENT_VISIBLE
  CLIENT_REQUEST
}

enum FinancialType {
  INCOME
  EXPENSE
}

enum RecurringType {
  MONTHLY
  QUARTERLY
  YEARLY
}

enum NotificationType {
  TASK_ASSIGNED
  TASK_COMPLETED
  PROJECT_UPDATE
  MILESTONE_COMPLETED
  CLIENT_COMMENT
  PAYMENT_RECEIVED
  DEADLINE_APPROACHING
}

enum PaymentMethod {
  CASH
  BANK_TRANSFER
  CREDIT_CARD
  DEBIT_CARD
  PIX
  CHECK
  OTHER
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}

enum SprintStatus {
  PLANNING
  ACTIVE
  COMPLETED
  CANCELLED
}

enum TimerEventType {
  TIMER_START
  TIMER_PAUSE
  TIMER_STOP
  TIMER_UPDATE
  TASK_COMPLETE
}
